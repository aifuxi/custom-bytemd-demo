export const mockContent =
  "---\n# frontmatter: https://jekyllrb.com/docs/front-matter/\nlayout: post\ntitle: Blogging Like a Hacker\n---\n\n## Markdown Basic SyntaxMarkdown Basic SyntaxMarkdown Basic Syntax\n\nI just love **bold text**. Italicized text is the _cat's meow_. At the command prompt, type `nano`.\n\nMy favorite markdown editor is [ByteMD](https://github.com/bytedance/bytemd).\n\n1. First item\n2. Second item\n3. Third item\n\n> Dorothy followed her through many of the beautiful rooms in her castle.\n\n```js\nimport gfm from '@bytemd/plugin-gfm'\nimport { Editor, Viewer } from 'bytemd'\n\nconst plugins = [\n  gfm(),\n  // Add more plugins here\n]\n\nconst editor = new Editor({\n  target: document.body, // DOM to render\n  props: {\n    value: '',\n    plugins,\n  },\n})\n\neditor.on('change', (e) => {\n  editor.$set({ value: e.detail.value })\n})\n```\n\n## GFM Extended Syntax\n\nAutomatic URL Linking: https://github.com/bytedance/bytemd\n\n~~The world is flat.~~ We now know that the world is round.\n\n- [x] Write the press release\n- [ ] Update the website\n- [ ] Contact the media\n\n| Syntax    | Description |\n| --------- | ----------- |\n| Header    | Title       |\n| Paragraph | Text        |\n\n## Footnotes\n\nHere's a simple footnote,[^1] and here's a longer one.[^bignote]\n\n[^1]: This is the first footnote.\n[^bignote]: Here's one with multiple paragraphs and code.\n\n    Indent paragraphs to include them in the footnote.\n\n    `{ my code }`\n\n    Add as many paragraphs as you like.\n\n## Gemoji\n\nThumbs up: :+1:, thumbs down: :-1:.\n\nFamilies: :family_man_man_boy_boy:\n\nLong flags: :wales:, :scotland:, :england:.\n\n## Math Equation\n\nInline math equation: $a+b$\n\n$$\n\\displaystyle \\left( \\sum_{k=1}^n a_k b_k \\right)^2 \\leq \\left( \\sum_{k=1}^n a_k^2 \\right) \\left( \\sum_{k=1}^n b_k^2 \\right)\n$$\n\n## Mermaid Diagrams\n\n```mermaid\ngraph TD;\n  A-->B;\n  A-->C;\n  B-->D;\n  C-->D;\n```\n";

export const mockContent2 =
  '\n## 前置准备\n\n- Debian 11.x\n\n## 目标\n\n- 能跑前端项目，切换 Node 版本方便\n- 能部署前端代码\n- 在终端敲命令有提示和高亮\n\n## 具体步骤\n\n### 准备一个 Debian 系统\n\n有 2 种方案：\n\n1. 使用 Docker\n2. 使用云服务器\n\n我这里使用 Docker 启动一个本地的 Debian container\n\n```shell\ndocker run -it --name debian-setup debian:11.7 /bin/bash\n```\n\n#### 配置阿里云镜像源\n\n```shell\n# 1. 先备份源文件，如果出错了还可以还原\n$ cp /etc/apt/sources.list /etc/apt/sources.list.bak\n\n# 2. 使用 sed 替换文件内容\n$ sed -i -E \'s/(deb|security).debian.org/mirrors.aliyun.com/g\' /etc/apt/sources.list\n\n# 3. 更新缓存\n$ apt update\n```\n\n#### 安装常用包\n\n- **procps**：如需使用 `ps` 命令，需要安装这个包\n\n- **zsh**：shell 环境，后面安装 Oh My Zsh 需要，Oh My Zsh是基于 zsh 的\n\n- **unzip**：`unzip xxx` 可快速解压 zip 文件，后面安装 fnm 需要\n\n- **nginx**：Web 服务器，有反向代理的功能，部署前端项目必备\n\n- **vim**、**git**、**wget**、**curl**，不过多介绍，必装\n\n```shell\napt install vim git zsh wget curl tree procps nginx unzip -y\n```\n\n**-y**: 表示自动回答 "yes"，即在安装软件包时自动回答 "yes"，无需手动确认。\n\n### 配置 Shell 环境\n\n1. 安装一个 Nerd Font 字体：这里推荐安装 [JetBrainsMono Nerd Font](https://github.com/ryanoasis/nerd-fonts/releases/download/v3.1.1/JetBrainsMono.zip) 字体，好看。安装完字体后，**记得在终端软件把字体设置为 JetBrainsMono Nerd Font**\n\n> Nerd Font 字体通过添加图标和符号的支持，提供了更好的编程和终端体验。它可以增强代码的可读性和可视化效果，并且具有可定制性和免费开源的优势。\n\n2. 安装 Oh My Zsh\n\n国外源安装，请看 [ohmyz.sh/#install](https://ohmyz.sh/#install)\n\n这里使用国内源( Gitee / 码云)安装\n\n使用 `wget` 获取 `install.sh`；\n\n执行这条命令后，你会在当前目录下得到一个 `install.sh` 文件\n\n```shell\nwget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh\n```\n\n给`install.sh`赋予可执行的权限\n\n```shell\n# 在当前目录下执行，然后输入密码执行操作\n$ chmod +x install.sh\n```\n\n编辑 `install.sh`，修改 `REPO` 和 `REMOTE` 字段，设置国内源\n\n```shell\nvim install.sh\n```\n\n把\n\n```shell\nREPO=${REPO:-ohmyzsh/ohmyzsh}\nREMOTE=${REMOTE:-https://github.com/${REPO}.git}\n```\n\n修改成\n\n```shell\nREPO=${REPO:-mirrors/oh-my-zsh}\nREMOTE=${REMOTE:-https://gitee.com/${REPO}.git}\n```\n\n编辑好后 `:wq` 保存\n\n在当前目录下执行 `install.sh`\n\n```shell\n./install.sh\n```\n\n执行完后，会提示 "Do you want to change your default shell to zsh? [Y/n]"\n\n输入 Y，切换默认的 shell 为 zsh\n\n设置插件\n\n- **extract** 已内置，提供一个 extract 命令，什么 tar, gz, zip, rar 文件，直接用 `extract 文件名` 一把梭就能解压了，不用再记什么 tar 的用法了\n\n- **zsh-autosuggestions** 需要自己安装，提供基于历史命令补全和提示的能力，敲过一遍的命令，后面都有提示了\n\n- **zsh-syntax-highlighting** 需要自己安装，提供命令高亮和校验的能力；不存在的命令会标红，存在的命令会标绿\n\n综上，我们想要配置 **git**、**extract**、**zsh-autosuggestions**、**zsh-syntax-highlighting** 4个插件，其中 **git**、**extract** 已经内置了，我们只需安装 **zsh-autosuggestions**、**zsh-syntax-highlighting** 这两个插件即可。\n\n```shell:abc.sh\n# 下载 zsh-autosuggestions 插件\n$ git clone https://gitee.com/wangzhen0518/zsh-autosuggestions.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-autosuggestions\n\n# 下载 zsh-syntax-highlighting 插件\n$ git clone https://gitee.com/muxiaoliu/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n```\n\n`https://gitee.com/wangzhen0518/zsh-autosuggestions.git` 和 `https://gitee.com/muxiaoliu/zsh-syntax-highlighting.git` 是我从 [Gitee](https://search.gitee.com/?q=zsh-syntax-highlighting&type=repository) 上随便找的别人克隆好的镜像仓库，也可以自己查找替换\n\n修改配置文件，启用插件\n\n```shell\nsed  -i \'s/plugins=(git)/plugins=(git extract zsh-syntax-highlighting zsh-autosuggestions)/g\'  ~/.zshrc\n```\n\n让配置生效\n\n```shell\nsource ~/.zshrc\n```\n\n效果\n\n### 配置 Node 环境\n\n> nvm 和 fnm 都是 Node.js 版本管理工具。相对来说，nvm 较为成熟和稳定，而 fnm 是使用 Rust 实现的，比 nvm 提供了更好的性能。\n\n个人感觉 nvm 有点拖慢打开终端的速度，有点慢，更倾向安装 fnm\n\n访问这个链接：[fnm#installation](https://github.com/Schniz/fnm#installation) 查看安装文档进行安装\n\n1. 使用 `curl`\n\n```shell\ncurl -fsSL https://fnm.vercel.app/install | bash\n```\n\n2. 使安装的 `fnm` 立即生效\n\n```shell\nsource ~/.zshrc\n```\n\n3. 安装 Node.js\n\n```shell\n# 先设置 Node.js 镜像源\necho \'export FNM_NODE_DIST_MIRROR=https://npmmirror.com/mirrors/node/\' >> ~/.zshrc\n\n# 使配置生效\nsource ~/.zshrc\n\n# 以安装 Node.js 20.x 的版本为例\nfnm install 20 \n\n# 或者安装时直接指定镜像\nfnm install 20 --node-dist-mirror https://npmmirror.com/mirrors/node/\n\n# 设置 20.x 版本为默认\nfnm default 20\n```\n\n### 安装必备的 npm 包\n\n```shell\n# npm/pnpm 配置淘宝镜像源，npm 和 pnpm 配置是共享的，只需配置一次就行\nnpm config set registry=https://registry.npmmirror.com\n\n# 安装 pnpm\nnpm i -g pnpm\n\n# 初始化，设置 pnpm 安装包时默认的存储位置\npnpm setup\n\n# pnpm setup 命令会在 ~/.zshrc 添加一些配置，执行下面命令让配置生效\nsource ~/.zshrc\n\n# 安装 pm2 rimraf 包\npnpm i -g pm2 rimraf\n```\n\n- **pm2**：用来托管 Node.js 服务\n\n- **rimraf**：可以认为是 Node.js 版本的 `rm -rf`，不过它是跨平台的，Windows 上也能用\n';
